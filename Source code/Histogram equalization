from ultralytics import YOLO
import cv2
import math
import serial
import time
import requests
import base64
import json
import numpy as np
from blynklib import Blynk

#https://blynk.cloud/external/api/update?token=vB-UzWHaX7ttbrx_xSEbc2_lT_KK6l4f&V1=
BLYNK_SERVER = "https://blynk.cloud"
BLYNK_AUTH_TOKEN = "vB-UzWHaX7ttbrx_xSEbc2_lT_KK6l4f"
VIRTUAL_PIN = 1

def update_data_to_blynk(value):
    iot_url = f"{BLYNK_SERVER}/external/api/update?token={BLYNK_AUTH_TOKEN}&V{VIRTUAL_PIN}={value}"

    try:
        response = requests.get(iot_url)
        if response.status_code == 200:
            print("Data sent successfully to Blynk.")
        else:
            print(f"Failed to send data to Blynk. Status code: {response.status_code}")
    except Exception as e:
        print(f"Error: {e}")

# Load pre-trained model for object detection (e.g., Haarcascades for simplicity)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Open webcam
cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)

# model
model = YOLO("yolo-Weights/yolov8n.pt")

# object classes
classNames = ["person", "bicycle", "car", "motorbike", "aeroplane", "bus", "train", "truck", "boat",
              "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat",
              "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella",
              "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat",
              "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup",
              "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli",
              "carrot", "hot dog", "pizza", "donut", "cake", "chair", "sofa", "pottedplant", "bed",
              "diningtable", "toilet", "tvmonitor", "laptop", "mouse", "remote", "keyboard", "cell phone",
              "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors",
              "teddy bear", "hair drier", "toothbrush"
              ]
#classNames = ["person","cat","dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe",]


try:
    while True:
        success, img = cap.read()
        results = model(img, stream=True)
        # coordinates
        for r in results:
            boxes = r.boxes
            for box in boxes:
                # bounding box
                x1, y1, x2, y2 = box.xyxy[0]
                x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2) # convert to int values
                # put box in cam
                cv2.rectangle(img, (x1, y1), (x2, y2), (255, 0, 255), 3)

                # confidence
                confidence = math.ceil((box.conf[0]*100))/100
                print("Confidence --->",confidence)

                # class name
                cls = int(box.cls[0])
                print("Class name -->", classNames[cls])

                if classNames[cls]=="elephant":
                    update_data_to_blynk(classNames[cls])
                elif classNames[cls]=="bear":
                    update_data_to_blynk(classNames[cls])
                elif classNames[cls]=="giraffe":
                    update_data_to_blynk(classNames[cls])
                elif classNames[cls]=="horse":
                    update_data_to_blynk(classNames[cls])
                elif classNames[cls]=="person":
                    update_data_to_blynk(classNames[cls])    

                    
                # object details
                org = [x1, y1]
                font = cv2.FONT_HERSHEY_SIMPLEX
                fontScale = 1
                color = (255, 0, 0)
                thickness = 2

                #gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                faces = face_cascade.detectMultiScale(img, scaleFactor=1.3, minNeighbors=5)

                if len(faces) > 0:
                    cv2.putText(img, classNames[cls], org, font, fontScale, color, thickness)
                    #update_data_to_blynk(classNames[cls])
                    

                                
                    


        cv2.imshow('Webcam', img)
        if cv2.waitKey(1) == ord('q'):
            break
except KeyboardInterrupt:
    cap.release()
    src.close()
    cv2.destroyAllWindows()
